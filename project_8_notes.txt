1 ðŸŸ¢ Sliding Window Pattern
ðŸŸ¡ Definition
- Sliding windows start from the first element and keep shifting right by one element and adjust the length of the window according
to the problem
- in some problems the window remains cosntant and in some it grows and shrinks
- usually longest/shortest substring, substring, or desired value are common problems
ðŸŸ¡ Coding problems
- Maximum Subarray âœ… M
- Minimum Size Subarray Sum âœ… M
- Longest Substring with At Most K Distinct Characters âœ… M
ðŸŸ¡ Resources

2 ðŸŸ¢ Two Pointers Pattern
ðŸŸ¡ Definitions
- As the name suggests, the two pointers pattern uses two pointers to iterate over an array or list until the conditions of the problem are satisfied. 
This is useful because it allows us to keep track of the values of two different indexes in a single iteration. Whenever thereâ€™s a requirement to find 
two data elements in an array that satisfy a certain condition, the two pointers pattern should be the first strategy to come to mind.
- The pointers can be used to iterate the data structure in one or both directions, depending on the problem statement. For example, to identify whether a string is a palindrome, we can use one pointer to iterate the string from the beginning and the other to iterate it from the end.
ðŸŸ¡ Coding problems
- Remove Duplicates from Sorted Array âœ… 3/10
- Squares of a Sorted Array âœ… 5/10
- 3sum âœ… M 8/10
- Two sum II

3 ðŸŸ¢ Fast and Slow Pointers pattern
ðŸŸ¡ Definition
- uses two pointers to traverse an iterable data structure at different speeds. Itâ€™s usually used to identify 
distinguishable features of directional data structures, such as a linked list or an array.
- Generally, the slow pointer moves forward by a factor of one, and the fast pointer moves by a factor of two in each step. However, the speed can be adjusted according to the problem statement.
- Unlike the two pointers approach, which is concerned with data values, the fast and slow pointers approach is used to determine data structure traits using indices in arrays or node pointers in linked lists. The approach is commonly 
used to detect cycles in the given data structure, so itâ€™s also known as Floydâ€™s cycle detection algorithm.
- To understand the concept, think of two runners on a track. While they start from the same point, they have different running speeds. 
If the race track is a circle, the faster runner will overtake the slower one after completing a lap. On the other hand, if the track is straight, the faster runner will end the race before the slower one, hence never meeting on the track again.
- only works on data that can be traversed in a linear fasion
ðŸŸ¡ Coding problems
- Linked List Cycle âœ… E
- Linked List Cycle II âœ… M( Return Node where cycle begins)
- Happy Number âœ… E

4 ðŸŸ¢ Merge Intervals
ðŸŸ¡ Definition
- an interval is (usually) an interval of time, represented by a start and an end. ex: [1,10]
- an example problem would be to merge below intervals
Input: [[1,3],[5,10],[7,15],[18,30],[22,25]]
Output: [[1,3],[5,15],[18,30]]
ðŸŸ¡ Coding Problems
- Merge Intervals âœ… M
- Insert Intervals âœ… M
- Employee Free Time âœ… H

5 ðŸŸ¢ In place Reversal of a Linked List
ðŸŸ¡ Definition
- This technique describes an efficient way to reverse the links between a set of nodes of a LinkedList. 
Often, the constraint is that we need to do this in-place, i.e., using the existing node objects and without using extra memory.
ðŸŸ¡ Coding Problems
- Reverse Linked List âœ… E 1/10

--------------------------------------------------------------------------------------

ðŸŸ¢ To-do list
- learn each pattern and like do 2 problems from that pattern
- then finish your DSA and just think about which pattern is in each

ðŸŸ¢ Thoughts
- should i just do brute force first? helped on #2
- i realy think its important for me to not look at solutions without AT LEAST figuring out the brute force
- don't just use for loops....use while loops
- redo minimum size subarray sum with binary search
- maybe its smart to use graph paper with coding problems
- THE DEBUGGER IN LEETCODE IS SO HELPFUL OMG
- is the map in js an ordered dictionary
- i think as long as you are doing 1-2 coding problems daily u r good
- a really big part of being good at these questions is coming up with good test cases
- you can straight up just google the grokking introductions
- you don't need to indicate dates and stuff in here cuz u can just go to ur leetcode account for thats

ðŸŸ¢ Info 
ðŸŸ¡ Difference between sliding window and 2 pointers
- sliding window uses an aggregate of everything in window usually
- Sliding window algorithms can be implemented with a single pointer and a variable for window size. Typically we use all of the elements within the window for the problem (for eg - sum of all elements in the window).
- Two pointer technique is quite similar but we usually compare the value at the two pointers instead of all the elements between the pointers.
- Two pointers can also have variations like fast-slow pointer.
- They are vary similar but in sliding window u keep track of something like a sum
ðŸŸ¡ let vs var vs const 
- var is globally scoped (on a whole window of code when not in a function)
    - when declared inside a function it is locally scoped
    - var variables can be re-declared and updated. This is a problem when you forget that you already declared a variable
    - var is hoisted to the top of your code and initialized as undefined (unless a value is asigned).
    Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.
- let is scoped within whatever brackets it is in {}
    - it is the preffered variable declaration
    - can be updated, but not re-declared
    - Just like  var, let declarations are hoisted to the top. Unlike var which is initialized as undefined, 
    the let keyword is not initialized. So if you try to use a let variable before declaration, you'll get a Reference Error.
- Variables declared with the const maintain constant values
    - const cannot be updated or redeclared
    - also work based on bracket access like let. it is also hoisted like let
    - the behavior is different when it comes to objects made with const
    - the properties of a const object can be updated
ðŸŸ¡ in leetcode, contiguous just means in the same direction




ðŸŸ¢ How to
ðŸŸ¡ convert a string to a number use parse int

ðŸŸ¢ Questions

ðŸŸ¢ Resources
ðŸŸ¡ Nice Article
https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed
ðŸŸ¡ Grokking the coding interview patterns
https://www.educative.io/courses/grokking-the-coding-interview
ðŸŸ¡ Grokking Github (incase site ever becomes paid)
https://github.com/dipjul/Grokking-the-Coding-Interview-Patterns-for-Coding-Questions
ðŸŸ¡ Grokking to Leetcode
https://gist.github.com/tykurtz/3548a31f673588c05c89f9ca42067bc4
ðŸŸ¡ For some reason, this one has the intros
https://www.educative.io/courses/grokking-coding-interview-patterns-cpp/YV0pQ4Gw4w0
ðŸŸ¡ Merge Intervals Pattern
https://emre.me/coding-patterns/merge-intervals/
https://medium.com/@timpark0807/leetcode-is-easy-the-interval-pattern-d68a7c1c841
https://www.techinterviewhandbook.org/algorithms/interval/
ðŸŸ¡ Pretty good grokking intros
https://designgurus.org/blog/grokking-leetcode


ðŸŸ¢ Terminal

ðŸŸ¢ Issues